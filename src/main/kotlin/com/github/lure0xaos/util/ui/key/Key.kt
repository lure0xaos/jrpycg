package com.github.lure0xaos.util.ui.key

import java.awt.event.KeyEvent

@Suppress("unused")
enum class Key(val code: Int, val constant: String) {
    VK_ENTER('\n'.code, "K_ENTER"),
    VK_BACK_SPACE('\b'.code, "K_BACK_SPACE"),
    VK_TAB('\t'.code, "K_TAB"),
    VK_CANCEL(0x03, "K_CANCEL"),
    VK_CLEAR(0x0C, "K_CLEAR"),
    VK_SHIFT(0x10, "K_SHIFT"),
    VK_CONTROL(0x11, "K_CONTROL"),
    VK_ALT(0x12, "K_ALT"),
    VK_PAUSE(0x13, "K_PAUSE"),
    VK_CAPS_LOCK(0x14, "K_CAPS_LOCK"),
    VK_ESCAPE(0x1B, "K_ESCAPE"),
    VK_SPACE(0x20, "K_SPACE"),
    VK_PAGE_UP(0x21, "K_PAGE_UP"),
    VK_PAGE_DOWN(0x22, "K_PAGE_DOWN"),
    VK_END(0x23, "K_END"),
    VK_HOME(0x24, "K_HOME"),
    VK_LEFT(0x25, "K_LEFT"),
    VK_UP(0x26, "K_UP"),
    VK_RIGHT(0x27, "K_RIGHT"),
    VK_DOWN(0x28, "K_DOWN"),
    VK_COMMA(0x2C, "K_COMMA"),
    VK_MINUS(0x2D, "K_MINUS"),
    VK_PERIOD(0x2E, "K_PERIOD"),
    VK_SLASH(0x2F, "K_SLASH"),
    VK_0(0x30, "K_0"),
    VK_1(0x31, "K_1"),
    VK_2(0x32, "K_2"),
    VK_3(0x33, "K_3"),
    VK_4(0x34, "K_4"),
    VK_5(0x35, "K_5"),
    VK_6(0x36, "K_6"),
    VK_7(0x37, "K_7"),
    VK_8(0x38, "K_8"),
    VK_9(0x39, "K_9"),
    VK_SEMICOLON(0x3B, "K_SEMICOLON"),
    VK_EQUALS(0x3D, "K_EQUALS"),
    VK_A(0x41, "K_a"),
    VK_B(0x42, "K_b"),
    VK_C(0x43, "K_c"),
    VK_D(0x44, "K_d"),
    VK_E(0x45, "K_e"),
    VK_F(0x46, "K_f"),
    VK_G(0x47, "K_g"),
    VK_H(0x48, "K_h"),
    VK_I(0x49, "K_i"),
    VK_J(0x4A, "K_j"),
    VK_K(0x4B, "K_k"),
    VK_L(0x4C, "K_l"),
    VK_M(0x4D, "K_m"),
    VK_N(0x4E, "K_n"),
    VK_O(0x4F, "K_o"),
    VK_P(0x50, "K_p"),
    VK_Q(0x51, "K_q"),
    VK_R(0x52, "K_r"),
    VK_S(0x53, "K_s"),
    VK_T(0x54, "K_t"),
    VK_U(0x55, "K_u"),
    VK_V(0x56, "K_v"),
    VK_W(0x57, "K_w"),
    VK_X(0x58, "K_x"),
    VK_Y(0x59, "K_y"),
    VK_Z(0x5A, "K_z"),
    VK_OPEN_BRACKET(0x5B, "K_OPEN_BRACKET"),
    VK_BACK_SLASH(0x5C, "K_BACK_SLASH"),
    VK_CLOSE_BRACKET(0x5D, "K_CLOSE_BRACKET"),
    VK_NUMPAD0(0x60, "K_KP0"),
    VK_NUMPAD1(0x61, "K_KP1"),
    VK_NUMPAD2(0x62, "K_KP2"),
    VK_NUMPAD3(0x63, "K_KP3"),
    VK_NUMPAD4(0x64, "K_KP4"),
    VK_NUMPAD5(0x65, "K_KP5"),
    VK_NUMPAD6(0x66, "K_KP6"),
    VK_NUMPAD7(0x67, "K_KP7"),
    VK_NUMPAD8(0x68, "K_KP8"),
    VK_NUMPAD9(0x69, "K_KP9"),
    VK_MULTIPLY(0x6A, "K_MULTIPLY"),
    VK_ADD(0x6B, "K_ADD"),
    VK_SEPARATOR(0x6C, "K_SEPARATOR"),
    VK_SUBTRACT(0x6D, "K_SUBTRACT"),
    VK_DECIMAL(0x6E, "K_DECIMAL"),
    VK_DIVIDE(0x6F, "K_DIVIDE"),
    VK_DELETE(0x7F, "K_DELETE"),
    VK_NUM_LOCK(0x90, "K_NUM_LOCK"),
    VK_SCROLL_LOCK(0x91, "K_SCROLL_LOCK"),
    VK_F1(0x70, "K_F1"),
    VK_F2(0x71, "K_F2"),
    VK_F3(0x72, "K_F3"),
    VK_F4(0x73, "K_F4"),
    VK_F5(0x74, "K_F5"),
    VK_F6(0x75, "K_F6"),
    VK_F7(0x76, "K_F7"),
    VK_F8(0x77, "K_F8"),
    VK_F9(0x78, "K_F9"),
    VK_F10(0x79, "K_F10"),
    VK_F11(0x7A, "K_F11"),
    VK_F12(0x7B, "K_F12"),
    VK_F13(0xF000, "K_F13"),
    VK_F14(0xF001, "K_F14"),
    VK_F15(0xF002, "K_F15"),
    VK_F16(0xF003, "K_F16"),
    VK_F17(0xF004, "K_F17"),
    VK_F18(0xF005, "K_F18"),
    VK_F19(0xF006, "K_F19"),
    VK_F20(0xF007, "K_F20"),
    VK_F21(0xF008, "K_F21"),
    VK_F22(0xF009, "K_F22"),
    VK_F23(0xF00A, "K_F23"),
    VK_F24(0xF00B, "K_F24"),
    VK_PRINTSCREEN(0x9A, "K_PRINTSCREEN"),
    VK_INSERT(0x9B, "K_INSERT"),
    VK_HELP(0x9C, "K_HELP"),
    VK_META(0x9D, "K_META"),
    VK_BACK_QUOTE(0xC0, "K_BACK_QUOTE"),
    VK_QUOTE(0xDE, "K_QUOTE"),
    VK_KP_UP(0xE0, "K_KP_UP"),
    VK_KP_DOWN(0xE1, "K_KP_DOWN"),
    VK_KP_LEFT(0xE2, "K_KP_LEFT"),
    VK_KP_RIGHT(0xE3, "K_KP_RIGHT"),
    VK_DEAD_GRAVE(0x80, "K_DEAD_GRAVE"),
    VK_DEAD_ACUTE(0x81, "K_DEAD_ACUTE"),
    VK_DEAD_CIRCUMFLEX(0x82, "K_DEAD_CIRCUMFLEX"),
    VK_DEAD_TILDE(0x83, "K_DEAD_TILDE"),
    VK_DEAD_MACRON(0x84, "K_DEAD_MACRON"),
    VK_DEAD_BREVE(0x85, "K_DEAD_BREVE"),
    VK_DEAD_ABOVEDOT(0x86, "K_DEAD_ABOVEDOT"),
    VK_DEAD_DIAERESIS(0x87, "K_DEAD_DIAERESIS"),
    VK_DEAD_ABOVERING(0x88, "K_DEAD_ABOVERING"),
    VK_DEAD_DOUBLEACUTE(0x89, "K_DEAD_DOUBLEACUTE"),
    VK_DEAD_CARON(0x8a, "K_DEAD_CARON"),
    VK_DEAD_CEDILLA(0x8b, "K_DEAD_CEDILLA"),
    VK_DEAD_OGONEK(0x8c, "K_DEAD_OGONEK"),
    VK_DEAD_IOTA(0x8d, "K_DEAD_IOTA"),
    VK_DEAD_VOICED_SOUND(0x8e, "K_DEAD_VOICED_SOUND"),
    VK_DEAD_SEMIVOICED_SOUND(0x8f, "K_DEAD_SEMIVOICED_SOUND"),
    VK_AMPERSAND(0x96, "K_AMPERSAND"),
    VK_ASTERISK(0x97, "K_ASTERISK"),
    VK_QUOTEDBL(0x98, "K_QUOTEDBL"),
    VK_LESS(0x99, "K_LESS"),
    VK_GREATER(0xa0, "K_GREATER"),
    VK_BRACELEFT(0xa1, "K_BRACELEFT"),
    VK_BRACERIGHT(0xa2, "K_BRACERIGHT"),
    VK_AT(0x0200, "K_AT"),
    VK_COLON(0x0201, "K_COLON"),
    VK_CIRCUMFLEX(0x0202, "K_CIRCUMFLEX"),
    VK_DOLLAR(0x0203, "K_DOLLAR"),
    VK_EURO_SIGN(0x0204, "K_EURO_SIGN"),
    VK_EXCLAMATION_MARK(0x0205, "K_EXCLAMATION_MARK"),
    VK_INVERTED_EXCLAMATION_MARK(0x0206, "K_INVERTED_EXCLAMATION_MARK"),
    VK_LEFT_PARENTHESIS(0x0207, "K_LEFT_PARENTHESIS"),
    VK_NUMBER_SIGN(0x0208, "K_NUMBER_SIGN"),
    VK_PLUS(0x0209, "K_PLUS"),
    VK_RIGHT_PARENTHESIS(0x020A, "K_RIGHT_PARENTHESIS"),
    VK_UNDERSCORE(0x020B, "K_UNDERSCORE"),
    VK_WINDOWS(0x020C, "K_WINDOWS"),
    VK_CONTEXT_MENU(0x020D, "K_CONTEXT_MENU"),
    VK_FINAL(0x0018, "K_FINAL"),
    VK_CONVERT(0x001C, "K_CONVERT"),
    VK_NONCONVERT(0x001D, "K_NONCONVERT"),
    VK_ACCEPT(0x001E, "K_ACCEPT"),
    VK_MODECHANGE(0x001F, "K_MODECHANGE"),

    VK_KANA(0x0015, "K_KANA"),

    VK_KANJI(0x0019, "K_KANJI"),
    VK_ALPHANUMERIC(0x00F0, "K_ALPHANUMERIC"),
    VK_KATAKANA(0x00F1, "K_KATAKANA"),
    VK_HIRAGANA(0x00F2, "K_HIRAGANA"),
    VK_FULL_WIDTH(0x00F3, "K_FULL_WIDTH"),
    VK_HALF_WIDTH(0x00F4, "K_HALF_WIDTH"),
    VK_ROMAN_CHARACTERS(0x00F5, "K_ROMAN_CHARACTERS"),
    VK_ALL_CANDIDATES(0x0100, "K_ALL_CANDIDATES"),
    VK_PREVIOUS_CANDIDATE(0x0101, "K_PREVIOUS_CANDIDATE"),
    VK_CODE_INPUT(0x0102, "K_CODE_INPUT"),
    VK_JAPANESE_KATAKANA(0x0103, "K_JAPANESE_KATAKANA"),
    VK_JAPANESE_HIRAGANA(0x0104, "K_JAPANESE_HIRAGANA"),
    VK_JAPANESE_ROMAN(0x0105, "K_JAPANESE_ROMAN"),
    VK_KANA_LOCK(0x0106, "K_KANA_LOCK"),
    VK_INPUT_METHOD_ON_OFF(0x0107, "K_INPUT_METHOD_ON_OFF"),
    VK_CUT(0xFFD1, "K_CUT"),
    VK_COPY(0xFFCD, "K_COPY"),
    VK_PASTE(0xFFCF, "K_PASTE"),
    VK_UNDO(0xFFCB, "K_UNDO"),
    VK_AGAIN(0xFFC9, "K_AGAIN"),
    VK_FIND(0xFFD0, "K_FIND"),
    VK_PROPS(0xFFCA, "K_PROPS"),
    VK_STOP(0xFFC8, "K_STOP"),
    VK_COMPOSE(0xFF20, "K_COMPOSE"),
    VK_ALT_GRAPH(0xFF7E, "K_ALT_GRAPH"),
    VK_BEGIN(0xFF58, "K_BEGIN"),

    VK_UNKNOWN(0, "");

    val text: String
        get() = KeyEvent.getKeyText(code)

    val isUnknown: Boolean
        get() = this == VK_UNKNOWN

    companion object {
        fun findByCode(code: Int): Key =
            values().firstOrNull { it.code == code } ?: VK_UNKNOWN

        fun findByName(name: String): Key =
            values().firstOrNull { if (name.length == 1) it.code == name[0].code else it.name == name } ?: VK_UNKNOWN
    }
}
